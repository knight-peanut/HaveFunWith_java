/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 26 00:44:51 GMT 2019
 */

package net.mooctest;

import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import static org.junit.Assert.*;

public class ProductTest {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        Product product0 = new Product("", 1.0, 1242);
        product0.discount = 100.0;
        product0.discount = (-544.18);
        product0.getInfo();
        assertEquals((-544.18), product0.getPaymentPrice(), 0.01);
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        Product product0 = new Product("", 1.0, 1219);
        product0.setDiscount(1.0);
        assertEquals(1219, product0.count);
        assertEquals(1.0, product0.getPaymentPrice(), 0.01);
    }

    @Test(timeout = 4000)
    public void test02() throws Throwable {
        Product product0 = new Product("", 1.0, 1219);
        product0.discount = 100.0;
        double double0 = product0.getPaymentPrice();
        assertEquals(100.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test03() throws Throwable {
        Product product0 = new Product("", 1.0, 760);
        String string0 = product0.getInfo();
        assertEquals("Name\uFF1A\nPrice\uFF1A1.00Yuan\nDiscount: No discount\nQuantity\uFF1A760", string0);
    }

    @Test(timeout = 4000)
    public void test04() throws Throwable {
        Product product0 = new Product("", 1.0, 1219);
        product0.discount = 100.0;
        String info = product0.getInfo();
        assertEquals("Name：\n" +
                "Price：1.00Yuan\n" +
                "Discount: 10000%\n" +
                "Quantity：1219", info);
        assertEquals(100.0, product0.getPaymentPrice(), 0.01);
    }

    @Test(timeout = 4000)
    public void test05() throws Throwable {
        Product product0 = null;
        try {
            product0 = new Product("xU", 1.0, (-1));
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Quantity should larger than 0: -1
            //
//         verifyException("net.mooctest.Product", e);
        }
    }

    @Test(timeout = 4000)
    public void test06() throws Throwable {
        Product product0 = new Product("", 1171, 1171);
        // Undeclared exception!
        try {
            product0.setName(".");
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Please enter English characters: .
            //
//         verifyException("net.mooctest.Product", e);
        }
    }

    @Test(timeout = 4000)
    public void test07() throws Throwable {
        Product product0 = new Product("", 100.0, 1);
        // Undeclared exception!
        try {
            product0.setName("Name\uFF1A\nPrice\uFF1A100.00Yuan\nDiscount: No discount\nQuantity\uFF1A1");
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Please enter English characters: Name\uFF1A
            // Price\uFF1A100.00Yuan
            // Discount: No discount
            // Quantity\uFF1A1
            //
//         verifyException("net.mooctest.Product", e);
        }
    }

    @Test(timeout = 4000)
    public void test08() throws Throwable {
        Product product0 = new Product("", 1183, 1183);
        // Undeclared exception!
        try {
            product0.setDiscount(0.25832);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Discount's length is wrong: 0.25832
            //
//         verifyException("net.mooctest.Product", e);
        }
    }

    @Test(timeout = 4000)
    public void test09() throws Throwable {
        Product product0 = new Product("z", 1.0, 1255);
        // Undeclared exception!
        try {
            product0.setDiscount(1255);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Discount cannot larger than 1: 1255.0
            //
//         verifyException("net.mooctest.Product", e);
        }
    }

    @Test(timeout = 4000)
    public void test10() throws Throwable {
        Product product0 = new Product("", 1.0, 1219);
        // Undeclared exception!
        try {
            product0.setDiscount(0.0);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Discount cannot less than 0: 0.0
            //
//         verifyException("net.mooctest.Product", e);
        }
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        Product product0 = new Product("", 1171, 1171);
        product0.setDiscount(0.26);
        assertEquals(0.26, product0.discount, 0.01);
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
        Product product0 = null;
        try {
            product0 = new Product("Yuan", 2150.1939890888907, 11);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Price's length is wrong: 2150.1939890888907
            //
//         verifyException("net.mooctest.Product", e);
        }
    }

    @Test(timeout = 4000)
    public void test13() throws Throwable {
        Product product0 = null;
        try {
            product0 = new Product("peYulzGDsfYHELwzaNfi", (-773), (-773));
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Price cannot less than 0: -773.0
            //
//         verifyException("net.mooctest.Product", e);
        }
    }

    @Test(timeout = 4000)
    public void test14() throws Throwable {
        Product product0 = new Product("z", 1.0, 1255);
        double double0 = product0.getPaymentPrice();
        assertEquals(1.0, double0, 0.01);
        assertEquals(1255, product0.count);
    }

    @Rule
    public ExpectedException expectedException = ExpectedException.none();

    @Test(timeout = 4000)
    public void test15() {
        expectedException.expect(IllegalArgumentException.class);
        expectedException.expectMessage("The length of product's name cannot longer than 20: ");
        Product product = new Product("aaaaaaaaaaaaaaaaaaaaaaaaa", 1, 1);
    }

    @Test(timeout = 4000)
    public void test16() {
        Product product1 = new Product("abbb", 20, 1);
        expectedException.expect(IllegalArgumentException.class);
        expectedException.expectMessage("Please enter English characters:");
        Product product = new Product("11", 1, 1);
    }

    @Test(timeout = 4000)
    public void test17() {
        expectedException.expect(IllegalArgumentException.class);
        expectedException.expectMessage("Price cannot less than 0");
        Product product = new Product("abbbb", 0, 1);
    }

    @Test(timeout = 4000)
    public void test18() {
        expectedException.expect(IllegalArgumentException.class);
        expectedException.expectMessage("Price's length is wrong:");
        Product product = new Product("abbbb", 1322.062222222, 1);
    }

    @Test(timeout = 4000)
    public void test19() {
        Product product = new Product("abbbb", 1322.06, 1);
        assertEquals(1322.06, product.price, 0.00001);
    }
}
