/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 26 00:52:33 GMT 2019
 */

package net.mooctest;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.PrintStream;

import static org.junit.Assert.*;

public class BookedStateTest {
    PrintStream console = null;

    ByteArrayOutputStream out = null;

    @Before
    public void setUp() {
        out = new ByteArrayOutputStream();
        console = System.out;
        System.setOut(new PrintStream(out));
    }

    @After
    public void tearDown() throws IOException {
        out.close();
        System.setOut(console);
    }
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BookedState bookedState0 = new BookedState();
      Room room0 = new Room();
      // Undeclared exception!
      try { 
        bookedState0.book(room0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot book under current state, RoomState: Booked
         //
//         verifyException("net.mooctest.BookedState", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BookedState bookedState0 = new BookedState();
      Room room0 = new Room();
      bookedState0.checkIn(room0);
      assertEquals(0, room0.getCapacity());
      String result = out.toString();
      assertEquals("Operation: Check In\n" +
              "Room: 0\n" +
              "Result: Success\n",result);
      assertEquals("RoomCode: 0\n" +
              "RoomType: null\n" +
              "Capacity: 0\n" +
              "RoomState: CheckIn\n" +
              "Price: 0.0\n",room0.toString());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BookedState bookedState0 = new BookedState();
      Room room0 = new Room();
      // Undeclared exception!
      try { 
        bookedState0.checkOut(room0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot check out under current state, RoomState: Booked
         //
//         verifyException("net.mooctest.BookedState", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BookedState bookedState0 = new BookedState();
      Room room0 = new Room();
      bookedState0.unsubscribe(room0);
      assertEquals(0, room0.getCapacity());
      String result = out.toString();
      assertEquals("Operation: Unsubscribe\n" +
              "Room: 0\n" +
              "Result: Success\n",result);
      assertEquals("RoomCode: 0\n" +
              "RoomType: null\n" +
              "Capacity: 0\n" +
              "RoomState: Free\n" +
              "Price: 0.0\n",room0.toString());
  }
}
