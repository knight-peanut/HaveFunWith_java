/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 26 00:47:50 GMT 2019
 */

package net.mooctest;

import org.junit.Test;
import static org.junit.Assert.*;

public class RoomTest  {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Room room0 = new Room();
      room0.setType("Advanced Room");
      assertEquals("Advanced Room", room0.getType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Room room0 = new Room();
      room0.setRoomCode(911);
      assertEquals(911, room0.getRoomCode());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Room room0 = new Room();
      BookedState bookedState0 = new BookedState();
      room0.setState(bookedState0);
      room0.unsubscribe();
      assertEquals(0, room0.getRoomCode());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Room room0 = new Room();
      CheckInState checkInState0 = new CheckInState();
      room0.setState(checkInState0);
      room0.checkOut();
      assertEquals(0, room0.getRoomCode());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Room room0 = new Room();
      // Undeclared exception!
      try { 
        room0.setPrice(4951.73418954);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Price length is wrong: 4951.73418954
         //
//         verifyException("net.mooctest.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Room room0 = new Room();
      // Undeclared exception!
      try { 
        room0.setPrice((-40.4824336335049));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Price cannot less than zero: -40.4824336335049
         //
//         verifyException("net.mooctest.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Room room0 = new Room();
      room0.setPrice(645);
      assertEquals(645.0, room0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Room room0 = new Room();
      room0.setCapacity(2);
      assertEquals(2, room0.getCapacity());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Room room0 = new Room();
      // Undeclared exception!
      try { 
        room0.setCapacity((-16));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Capacity should between 0~10.
         //
//         verifyException("net.mooctest.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Room room0 = new Room();
      // Undeclared exception!
      try { 
        room0.setType("Q=w");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Type not exists: Q=w
         //
//         verifyException("net.mooctest.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Room room0 = null;
      try {
        room0 = new Room(654, "Deluxe Room", 654, 654);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Capacity should between 0~10.
         //
//         verifyException("net.mooctest.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Room room0 = null;
      try {
        room0 = new Room(100, (String) null, (-771), 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal RoomCode: 100
         //
//         verifyException("net.mooctest.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Room room0 = new Room();
      // Undeclared exception!
      try { 
        room0.setRoomCode(1420);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal RoomCode: 1420
         //
//         verifyException("net.mooctest.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Room room0 = new Room();
      int int0 = room0.getCapacity();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Room room0 = new Room();
      double double0 = room0.getPrice();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Room room0 = new Room();
      room0.book();
      assertEquals(0, room0.getRoomCode());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Room room0 = new Room();
      String string0 = room0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Room room0 = null;
      try {
        room0 = new Room(500, (String) null, 500, 500);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal RoomCode: 500
         //
//         verifyException("net.mooctest.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Room room0 = new Room();
      String string0 = room0.getType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Room room0 = new Room();
      FreeTimeState freeTimeState0 = (FreeTimeState)room0.getState();
      assertEquals("RoomState: Free", freeTimeState0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Room room0 = new Room();
      room0.checkIn();
      assertEquals(0, room0.getRoomCode());
  }
}
