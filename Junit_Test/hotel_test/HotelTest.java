/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 26 00:42:58 GMT 2019
 */

package net.mooctest;

import org.junit.After;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import static org.junit.Assert.*;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.util.List;

public class HotelTest {
    PrintStream console = null;

    ByteArrayOutputStream out = null;

    @Before
    public void setUp() {
        out = new ByteArrayOutputStream();
        console = System.out;
        System.setOut(new PrintStream(out));
    }

    @After
    public void tearDown() throws IOException {
        out.close();
        System.setOut(console);
    }

    @Test(timeout = 4000)
    public void test0() throws Throwable {
        // Undeclared exception!
        try {
            Hotel.addRoom("Qi884Y]:*", (-1732189159), (-3467));
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Illegal RoomCode: -1732189159
            //
//         verifyException("net.mooctest.Room", e);
        }
    }

    @Test(timeout = 4000)
    public void test1() throws Throwable {
        List<Room> list0 = Hotel.rooms;
        Hotel.getFreeRooms();
        int int0 = 2486;
        // Undeclared exception!
        try {
            Hotel.removeRoomFromList(2486);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Room not Exist:2486
            //
//         verifyException("net.mooctest.Hotel", e);
        }
    }

    @Test(timeout = 4000)
    public void test2() throws Throwable {
        // Undeclared exception!
        try {
            Hotel.addRoom("Advanced Room", 849, 849);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Capacity should between 0~10.
            //
//         verifyException("net.mooctest.Room", e);
        }
    }

    @Test(timeout = 4000)
    public void test3() throws Throwable {
        // Undeclared exception!
        try {
            Hotel.addRoom("Deluxe Room", (-109), 1052);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Illegal RoomCode: -109
            //
//         verifyException("net.mooctest.Room", e);
        }
    }

    @Test(timeout = 4000)
    public void test4() throws Throwable {
        Hotel.getFreeRooms();
        Hotel.getFreeRooms();
        Hotel.addRoom("Deluxe Room", 248, 3);
    }

    @Test(timeout = 4000)
    public void test5() throws Throwable {
        Hotel.printAllRoomsInfo();
        // Undeclared exception!
        try {
            Hotel.queryRoom(712);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Room not exist: 712
            //
//         verifyException("net.mooctest.Hotel", e);
        }
    }

    @Test(timeout = 4000)
    public void test6() throws Throwable {
        String[] stringArray0 = new String[7];
        Hotel.main(stringArray0);
        assertEquals(7, stringArray0.length);
        String result = out.toString();
        assertEquals("2147483647\n", result);
    }

    @Test(timeout = 4000)
    public void test7() throws Throwable {
        Hotel hotel = new Hotel();
        Hotel.addRoom("Standard Room", 111, 4);
        Hotel.addRoom("Standard Room", 123, 3);
        Hotel.addRoom("Standard Room", 121, 2);
        Hotel.addRoom("Advanced Room", 112, 3);
        Hotel.addRoom("Deluxe Room", 113, 2);
        Hotel.addRoom("Deluxe Room", 101, 4);
        Hotel.queryRoom(111);
        Hotel.removeRoomFromList(113);
        List<Room> roomList = Hotel.getFreeRooms();
        assertEquals(5, roomList.size());
        Room room1 = roomList.get(0);
        room1.setState(new BookedState());
        List<Room> roomList1 = Hotel.getFreeRooms();
        assertEquals(4, roomList1.size());
        Hotel.printAllRoomsInfo();
        String result = out.toString();
        assertEquals("RoomCode: 111\n" +
                "RoomType: Standard Room\n" +
                "Capacity: 4\n" +
                "RoomState: Free\n" +
                "Price: 160.0\n" +
                "RoomCode: 112\n" +
                "RoomType: Advanced Room\n" +
                "Capacity: 3\n" +
                "RoomState: Free\n" +
                "Price: 210.0\n" +
                "RoomCode: 111\n" +
                "RoomType: Standard Room\n" +
                "Capacity: 4\n" +
                "RoomState: Free\n" +
                "Price: 160.0\n" +
                "RoomCode: 123\n" +
                "RoomType: Standard Room\n" +
                "Capacity: 3\n" +
                "RoomState: Free\n" +
                "Price: 140.0\n" +
                "RoomCode: 121\n" +
                "RoomType: Standard Room\n" +
                "Capacity: 2\n" +
                "RoomState: Free\n" +
                "Price: 120.0\n" +
                "RoomCode: 101\n" +
                "RoomType: Deluxe Room\n" +
                "Capacity: 4\n" +
                "RoomState: Booked\n" +
                "Price: 320.0\n", result);
    }

    @Rule
    public ExpectedException expectedException = ExpectedException.none();

    @Test(timeout = 4000)
    public void test8() throws Throwable {
        Hotel hotel = new Hotel();
        Hotel.addRoom("Standard Room", 111, 4);
        Hotel.addRoom("Advanced Room", 112, 3);
        Hotel.addRoom("Deluxe Room", 113, 2);
        expectedException.expect(IllegalArgumentException.class);
        Hotel.addRoom("Standard Room", 111, 4);
    }
}
