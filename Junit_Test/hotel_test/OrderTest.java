/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 26 00:50:19 GMT 2019
 */

package net.mooctest;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import static org.junit.Assert.*;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

public class OrderTest {
    PrintStream console = null;

    ByteArrayOutputStream out = null;

    @Before
    public void setUp() {
        out = new ByteArrayOutputStream();
        console = System.out;
        System.setOut(new PrintStream(out));
    }

    @After
    public void tearDown() throws IOException {
        out.close();
        System.setOut(console);
    }

    @Test(timeout = 4000)
    public void test0() throws Throwable {
        LinkedList<OrderItem> linkedList0 = new LinkedList<OrderItem>();
        Order.createOrder(linkedList0);
        assertEquals(0, linkedList0.size());
    }

    @Test(timeout = 4000)
    public void test1() throws Throwable {
        // Undeclared exception!
        try {
            Order.printOrders();
            //  fail("Expecting exception: ClassCastException");
            // Unstable assertion
        } catch (ClassCastException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test2() throws Throwable {
        String string0 = Order.formatDouble(0.9);
        assertEquals(".90", string0);
    }

    @Test(timeout = 4000)
    public void test3() throws Throwable {
        LinkedList<OrderItem> linkedList0 = new LinkedList<OrderItem>();
        OrderItem orderItem0 = new OrderItem("Xo", 1000.0, (-187));
        orderItem0.setCount(1);
        linkedList0.add(orderItem0);
        Order.createOrder(linkedList0);
        Order.createOrder(linkedList0);
        assertEquals(1, linkedList0.size());
    }

    @Test(timeout = 4000)
    public void test4() throws Throwable {
        OrderItem orderItem1 = new OrderItem("a", 11, 2);
        OrderItem orderItem2 = new OrderItem("b", 2, 3);
        OrderItem orderItem3 = new OrderItem("c", 1, 1);
        OrderItem orderItem4 = new OrderItem("d", 200, 3);
        List<OrderItem> orderItems = new ArrayList<>();
        orderItems.add(orderItem1);
        orderItems.add(orderItem2);
        orderItems.add(orderItem3);
        orderItems.add(orderItem4);
        OrderItem orderItem5 = new OrderItem("e", 11, 20);
        OrderItem orderItem6 = new OrderItem("f", 2, 30);
        OrderItem orderItem7 = new OrderItem("g", 1, 1);
        OrderItem orderItem8 = new OrderItem("h", 200, 3);
        List<OrderItem> orderItems1 = new ArrayList<>();
        orderItems.add(orderItem5);
        orderItems.add(orderItem6);
        orderItems.add(orderItem7);
        orderItems.add(orderItem8);
        OrderItem orderItem9 = new OrderItem("i", 1, 1);
        OrderItem orderItem10 = new OrderItem("j", 1, 1);
        OrderItem orderItem11 = new OrderItem("k", 1, 1);
        OrderItem orderItem12 = new OrderItem("l", 1, 1);
        List<OrderItem> orderItems2 = new ArrayList<>();
        orderItems.add(orderItem9);
        orderItems.add(orderItem10);
        orderItems.add(orderItem11);
        orderItems.add(orderItem12);
        Order.orders = new ArrayList<>();
        Order.createOrder(orderItems2);
        Order.createOrder(orderItems);
        Order.createOrder(orderItems1);
        Order.createOrder(orderItems2);
        assertEquals(4, Order.orders.size());
        Order maxOrder = Order.searchMaxOrder();
        assertEquals(1211.1999999999998, maxOrder.totalAmount(), 0.00001);
        Order.printOrders();
        Order order = new Order(orderItems);
        List<OrderItem> items = order.getItems();
        assertEquals(12, items.size());
        String result = out.toString();
        assertEquals("Order No.1\n" +
                "a\t8.80\t2\t17.60\n" +
                "b\t1.60\t3\t4.80\n" +
                "c\t.80\t1\t.80\n" +
                "d\t160.00\t3\t480.00\n" +
                "e\t8.80\t20\t176.00\n" +
                "f\t1.60\t30\t48.00\n" +
                "g\t.80\t1\t.80\n" +
                "h\t160.00\t3\t480.00\n" +
                "i\t.80\t1\t.80\n" +
                "j\t.80\t1\t.80\n" +
                "k\t.80\t1\t.80\n" +
                "l\t.80\t1\t.80\n" +
                "Order Total:1211.19\n" +
                "\n" +
                "Order No.2\n" +
                "Order Total:.00\n" +
                "\n" +
                "Order No.3\n" +
                "Order Total:.00\n" +
                "\n" +
                "Order No.4\n" +
                "Order Total:.00\n" +
                "\n" +
                "AllAmount: 1211.19\n", result);
    }
}
