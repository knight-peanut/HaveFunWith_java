/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 26 00:52:04 GMT 2019
 */

package net.mooctest;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import static org.junit.Assert.*;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

public class ShopKeeperTest {
    PrintStream console = null;

    ByteArrayOutputStream out = null;

    @Before
    public void setUp() {
        out = new ByteArrayOutputStream();
        console = System.out;
        System.setOut(new PrintStream(out));
    }

    @After
    public void tearDown() throws IOException {
        out.close();
        System.setOut(console);
    }

    @Test(timeout = 4000)
    public void test0() throws Throwable {
        ShopKeeper shopKeeper0 = new ShopKeeper();
        HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
        Integer integer0 = new Integer(3);
        hashMap0.put("FCl`", integer0);
        shopKeeper0.sellProducts(hashMap0);
        assertFalse(hashMap0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test1() throws Throwable {
        ShopKeeper shopKeeper0 = new ShopKeeper();
        shopKeeper0.showAllProducts();
        String result = out.toString();
        assertEquals("", result);
    }

    @Test(timeout = 4000)
    public void test2() throws Throwable {
        ShopKeeper shopKeeper0 = new ShopKeeper();
        Shop shop0 = new Shop();
        shopKeeper0.setShop(shop0);
    }

    @Test(timeout = 4000)
    public void test3() throws Throwable {
        Shop shop = new Shop();
        Product product1 = new Product("a", 1, 1);
        Product product2 = new Product("b", 2, 10);
        Product product3 = new Product("c", 3, 1);
        Product product4 = new Product("d", 4, 1);
        Product product5 = new Product("e", 1, 1);
        shop.addProduct(product1);
        shop.addProduct(product2);
        shop.addProduct(product3);
        shop.addProduct(product4);
        shop.addProduct(product5);
        String allInfo = shop.getAllProductsInfo();
        assertEquals("No.1\n" +
                "Name：a\n" +
                "Price：1.00Yuan\n" +
                "Discount: No discount\n" +
                "Quantity：1\n" +
                "No.2\n" +
                "Name：e\n" +
                "Price：1.00Yuan\n" +
                "Discount: No discount\n" +
                "Quantity：1\n" +
                "No.3\n" +
                "Name：b\n" +
                "Price：2.00Yuan\n" +
                "Discount: No discount\n" +
                "Quantity：10\n" +
                "No.4\n" +
                "Name：c\n" +
                "Price：3.00Yuan\n" +
                "Discount: No discount\n" +
                "Quantity：1\n" +
                "No.5\n" +
                "Name：d\n" +
                "Price：4.00Yuan\n" +
                "Discount: No discount\n" +
                "Quantity：1\n", allInfo);
        ShopKeeper shopKeeper = new ShopKeeper();
        shopKeeper.setShop(shop);
        Map<String, Integer> products = new HashMap<>();
        products.put("b", 5);
        shopKeeper.sellProducts(products);
        shopKeeper.showAllProducts();
        String result = out.toString();
        assertEquals("Selld Successfully:b*5\n" +
                "No.1\n" +
                "Name：a\n" +
                "Price：1.00Yuan\n" +
                "Discount: No discount\n" +
                "Quantity：1\n" +
                "No.2\n" +
                "Name：e\n" +
                "Price：1.00Yuan\n" +
                "Discount: No discount\n" +
                "Quantity：1\n" +
                "No.3\n" +
                "Name：b\n" +
                "Price：2.00Yuan\n" +
                "Discount: No discount\n" +
                "Quantity：5\n" +
                "No.4\n" +
                "Name：c\n" +
                "Price：3.00Yuan\n" +
                "Discount: No discount\n" +
                "Quantity：1\n" +
                "No.5\n" +
                "Name：d\n" +
                "Price：4.00Yuan\n" +
                "Discount: No discount\n" +
                "Quantity：1\n", result);
    }

    @Test(timeout = 4000)
    public void test4() throws Throwable {
        Shop shop = new Shop();
        Order.orders = new ArrayList<>();
        Product product1 = new Product("a", 1, 1);
        Product product2 = new Product("b", 2, 10);
        Product product3 = new Product("c", 3, 1);
        Product product4 = new Product("d", 4, 1);
        Product product5 = new Product("e", 1, 1);
        shop.addProduct(product1);
        shop.addProduct(product2);
        shop.addProduct(product3);
        shop.addProduct(product4);
        shop.addProduct(product5);
        ShopKeeper shopKeeper = new ShopKeeper();
        shopKeeper.setShop(shop);
        Map<String, Integer> products = new HashMap<>();
        products.put("abc", 5);
        products.put("b", 5);
        products.put("c", 1);
        shopKeeper.sellProducts(products);
        shopKeeper.showAllProducts();
        String result = out.toString();
        assertEquals("Selld Successfully:b*5\n" +
                "Selld Failed:Product is not exists.\n" +
                "Selld Failed:Quantity should larger than 0: 0\n" +
                "No.1\n" +
                "Name：a\n" +
                "Price：1.00Yuan\n" +
                "Discount: No discount\n" +
                "Quantity：1\n" +
                "No.2\n" +
                "Name：e\n" +
                "Price：1.00Yuan\n" +
                "Discount: No discount\n" +
                "Quantity：1\n" +
                "No.3\n" +
                "Name：b\n" +
                "Price：2.00Yuan\n" +
                "Discount: No discount\n" +
                "Quantity：5\n" +
                "No.4\n" +
                "Name：c\n" +
                "Price：3.00Yuan\n" +
                "Discount: No discount\n" +
                "Quantity：1\n" +
                "No.5\n" +
                "Name：d\n" +
                "Price：4.00Yuan\n" +
                "Discount: No discount\n" +
                "Quantity：1\n", result);
        assertEquals(1, Order.orders.size());
    }
}
